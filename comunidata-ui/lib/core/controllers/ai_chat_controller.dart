import 'dart:async';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import '../services/chat_service.dart';
import '../../dto/chat/request/chat_dto.dart';
import '../../dto/chat/request/chat_history_dto.dart';
import '../../dto/chat/response/base_dynamic_response_dto.dart';
import '../../dto/chat/response/simple_text_response_dto.dart';
import '../../dto/chat/response/report_download_response_dto.dart';

class AIChatController with ChangeNotifier {
  final ChatService _chatService;
  final List<ChatMessage> _messages = [];
  final List<Map<String, dynamic>> _conversations = [];

  bool _isLoading = false;
  bool _isTyping = false;
  String? _currentConversationId;
  String? _errorMessage;
  Timer? _typingTimer;

  List<ChatMessage> get messages => List.unmodifiable(_messages);
  List<Map<String, dynamic>> get conversations => List.unmodifiable(_conversations);
  bool get isLoading => _isLoading;
  bool get isTyping => _isTyping;
  String? get currentConversationId => _currentConversationId;
  String? get errorMessage => _errorMessage;
  bool get hasActiveConversation => _currentConversationId != null;

  AIChatController({ChatService? chatService})
    : _chatService = chatService ?? ChatService() {
    _initializeDefaultConversations();
  }

  void _initializeDefaultConversations() {
    _conversations.addAll([
      {
        'id': '1',
        'title': 'An√°lisis de ventas Q1',
        'subtitle': 'Hace 2 d√≠as',
        'isActive': false,
      },
      {
        'id': '2',
        'title': 'Tendencias de usuarios',
        'subtitle': 'Hace 1 semana',
        'isActive': false,
      },
    ]);
  }

  /// Inicia una nueva conversaci√≥n
  Future<void> startNewConversation() async {
    try {
      print('üÜï AIChatController: Iniciando nueva conversaci√≥n');
      _setLoading(true);
      _clearError();

      // Crear conversaci√≥n en el backend (si est√° disponible)
      // String? conversationId = await _chatService.createNewConversation();

      // Por ahora, generar ID local
      final conversationId = DateTime.now().millisecondsSinceEpoch.toString();
      _currentConversationId = conversationId;
      _messages.clear();

      // Desactivar todas las conversaciones
      for (var conversation in _conversations) {
        conversation['isActive'] = false;
      }

      // Agregar nueva conversaci√≥n
      _conversations.insert(0, {
        'id': conversationId,
        'title': 'Nueva conversaci√≥n',
        'subtitle': 'Ahora',
        'isActive': true,
      });

      print('‚úì AIChatController: Nueva conversaci√≥n creada: $conversationId');
      notifyListeners();
    } catch (e) {
      print('‚úó AIChatController: Error al crear conversaci√≥n: $e');
      _setError('Error al crear conversaci√≥n: ${e.toString()}');
    } finally {
      _setLoading(false);
    }
  }

  /// Carga una conversaci√≥n existente
  Future<void> loadConversation(String conversationId) async {
    try {
      print('üìÇ AIChatController: Cargando conversaci√≥n $conversationId');
      _setLoading(true);
      _clearError();

      _currentConversationId = conversationId;

      // Actualizar estado activo
      for (var conversation in _conversations) {
        conversation['isActive'] = conversation['id'] == conversationId;
      }

      // Intentar cargar historial desde el backend
      try {
        final history = await _chatService.getChatHistory(conversationId);
        _messages.clear();
        for (var historyItem in history) {
          _messages.add(ChatMessage(
            content: historyItem.prompt,
            isUser: true,
            timestamp: historyItem.date,
          ));
          if (historyItem.response != null) {
            _messages.add(ChatMessage(
              content: historyItem.response!,
              isUser: false,
              timestamp: historyItem.date,
            ));
          }
        }
        print('‚úì AIChatController: Historial cargado desde backend');
      } catch (e) {
        print('‚ö† AIChatController: No se pudo cargar historial del backend, usando datos locales');
        _loadLocalConversationData(conversationId);
      }

      notifyListeners();
    } catch (e) {
      print('‚úó AIChatController: Error al cargar conversaci√≥n: $e');
      _setError('Error al cargar conversaci√≥n: ${e.toString()}');
    } finally {
      _setLoading(false);
    }
  }

  /// Carga datos de conversaci√≥n locales (fallback)
  void _loadLocalConversationData(String conversationId) {
    _messages.clear();
    if (conversationId == '1') {
      _messages.addAll([
        ChatMessage(
          content: '¬øPuedes analizar las ventas del primer trimestre?',
          isUser: true,
          timestamp: DateTime.now().subtract(const Duration(minutes: 30)),
        ),
        ChatMessage(
          content: 'He analizado los datos de ventas del Q1. Las ventas totales fueron de \$2.5M, con un crecimiento del 15% respecto al trimestre anterior. Los productos m√°s vendidos fueron:\n\n‚Ä¢ Producto A: 35% de participaci√≥n\n‚Ä¢ Producto B: 28% de participaci√≥n\n‚Ä¢ Producto C: 20% de participaci√≥n\n\n¬øTe gustar√≠a que profundice en alg√∫n aspecto espec√≠fico?',
          isUser: false,
          timestamp: DateTime.now().subtract(const Duration(minutes: 29)),
        ),
      ]);
    } else if (conversationId == '2') {
      _messages.addAll([
        ChatMessage(
          content: 'Analiza las tendencias de usuarios activos',
          isUser: true,
          timestamp: DateTime.now().subtract(const Duration(days: 7)),
        ),
        ChatMessage(
          content: 'Bas√°ndome en los datos de usuarios activos, he identificado las siguientes tendencias:\n\nüìà **Crecimiento mensual**: +12%\nüë• **Usuarios nuevos**: 2,500\nüîÑ **Tasa de retenci√≥n**: 78%\nüì± **Dispositivo preferido**: Mobile (65%)\n\nLas horas pico de actividad son entre 7-9 PM. ¬øQuieres ver m√°s detalles sobre alguna m√©trica?',
          isUser: false,
          timestamp: DateTime.now().subtract(const Duration(days: 7)),
        ),
      ]);
    }
  }

  /// Elimina una conversaci√≥n
  Future<void> deleteConversation(String conversationId) async {
    try {
      print('üóëÔ∏è AIChatController: Eliminando conversaci√≥n $conversationId');
      _clearError();

      // Intentar eliminar del backend
      try {
        await _chatService.deleteConversation(conversationId);
        print('‚úì AIChatController: Conversaci√≥n eliminada del backend');
      } catch (e) {
        print('‚ö† AIChatController: No se pudo eliminar del backend: $e');
      }

      // Eliminar localmente
      _conversations.removeWhere((conversation) => conversation['id'] == conversationId);

      if (_currentConversationId == conversationId) {
        _currentConversationId = null;
        _messages.clear();
      }

      notifyListeners();
    } catch (e) {
      print('‚úó AIChatController: Error al eliminar conversaci√≥n: $e');
      _setError('Error al eliminar conversaci√≥n: ${e.toString()}');
    }
  }

  /// Env√≠a un mensaje al chat con soporte para respuestas din√°micas
  Future<void> sendMessage(String message, {String? userType}) async {
    if (message.trim().isEmpty || _isLoading) return;

    print('üí¨ AIChatController: Enviando mensaje');
    _clearError();

    // Agregar mensaje del usuario
    final userMessage = ChatMessage(
      content: message,
      isUser: true,
      timestamp: DateTime.now(),
    );
    _messages.add(userMessage);

    // Actualizar t√≠tulo de conversaci√≥n si es nueva
    if (_currentConversationId != null) {
      final conversationIndex = _conversations.indexWhere(
        (conv) => conv['id'] == _currentConversationId,
      );
      if (conversationIndex != -1 && _conversations[conversationIndex]['title'] == 'Nueva conversaci√≥n') {
        _conversations[conversationIndex]['title'] = message.length > 30
            ? '${message.substring(0, 30)}...'
            : message;
      }
    }

    _isLoading = true;
    _isTyping = true;
    notifyListeners();

    try {
      // Crear DTO para enviar al backend
      final chatDTO = ChatDTO(
        conversationId: _currentConversationId,
        prompt: message,
        userType: userType,
      );

      // Intentar obtener respuesta del backend
      try {
        print('üåê AIChatController: Llamando al backend...');
        final response = await _chatService.sendChatMessage(chatDTO);

        // Procesar respuesta din√°mica seg√∫n el tipo
        await _processDynamicResponse(response);

        print('‚úì AIChatController: Respuesta del backend procesada');
      } catch (e) {
        print('‚ö† AIChatController: Error al conectar con backend, usando respuesta simulada');
        // Fallback: generar respuesta simulada
        await Future.delayed(const Duration(seconds: 1));

        final aiResponse = _generateAIResponse(message);
        final aiMessage = ChatMessage(
          content: aiResponse,
          isUser: false,
          timestamp: DateTime.now(),
        );

        _messages.add(aiMessage);
      }
    } catch (e) {
      print('‚úó AIChatController: Error al enviar mensaje: $e');
      final errorMessage = ChatMessage(
        content: 'Lo siento, hubo un error procesando tu solicitud. Por favor intenta nuevamente.',
        isUser: false,
        timestamp: DateTime.now(),
      );
      _messages.add(errorMessage);
      _setError('Error al enviar mensaje: ${e.toString()}');
    } finally {
      _isLoading = false;
      _isTyping = false;
      notifyListeners();
    }
  }

  /// Procesa la respuesta din√°mica seg√∫n su tipo
  Future<void> _processDynamicResponse(BaseDynamicResponseDTO response) async {
    String messageContent;
    String? metadata;

    switch (response.type) {
      case ResponseType.SIMPLE_TEXT:
        final textResponse = response as SimpleTextResponseDTO;
        messageContent = textResponse.text;

        // Agregar summary y analysis si existen
        if (textResponse.summary != null) {
          messageContent = '**Resumen:** ${textResponse.summary}\n\n$messageContent';
        }
        if (textResponse.analysis != null) {
          messageContent = '$messageContent\n\n**An√°lisis:** ${textResponse.analysis}';
        }
        break;

      case ResponseType.REPORT_DOWNLOAD:
        final reportResponse = response as ReportDownloadResponseDTO;

        // Construir mensaje con informaci√≥n del reporte
        messageContent = 'üìä **Reporte Generado**\n\n';
        if (reportResponse.summary != null) {
          messageContent += '**Resumen:** ${reportResponse.summary}\n\n';
        }
        if (reportResponse.analysis != null) {
          messageContent += '**An√°lisis:** ${reportResponse.analysis}\n\n';
        }
        messageContent += '**ID del Reporte:** ${reportResponse.reportId}\n';
        messageContent += '**URL de Descarga:** ${reportResponse.downloadUrl}\n\n';
        messageContent += 'üì• *Puedes descargar el reporte usando el enlace proporcionado.*';

        metadata = reportResponse.reportId;
        break;
    }

    // Agregar mensaje con la respuesta procesada
    final aiMessage = ChatMessage(
      content: messageContent,
      isUser: false,
      timestamp: DateTime.now(),
      metadata: metadata,
      responseType: response.type,
    );

    _messages.add(aiMessage);
  }

  String _generateAIResponse(String userMessage) {
    final lowercaseMessage = userMessage.toLowerCase();
    
    if (lowercaseMessage.contains('tendencia') || lowercaseMessage.contains('analizar tendencias')) {
      return '''üìä **An√°lisis de Tendencias**

He identificado las siguientes tendencias en tus datos:

üîπ **Tendencia principal**: Crecimiento sostenido del 8% mensual
üîπ **Estacionalidad**: Picos en diciembre y julio
üîπ **Correlaciones**: Alta correlaci√≥n entre marketing digital y conversiones

**Recomendaciones:**
‚Ä¢ Incrementar inversi√≥n en Q4
‚Ä¢ Optimizar campa√±as para dispositivos m√≥viles
‚Ä¢ Implementar estrategias de retenci√≥n

¬øTe gustar√≠a que profundice en alguna de estas √°reas?''';
    }
    
    if (lowercaseMessage.contains('reporte') || lowercaseMessage.contains('generar reportes')) {
      return '''üìà **Generaci√≥n de Reportes**

He generado un reporte completo con los siguientes elementos:

**M√©tricas Clave:**
‚Ä¢ Revenue: \$1.2M (+15%)
‚Ä¢ Conversiones: 8,450 (+12%)
‚Ä¢ CAC: \$45 (-8%)
‚Ä¢ LTV: \$320 (+18%)

**Gr√°ficos incluidos:**
‚Ä¢ Evoluci√≥n temporal de ventas
‚Ä¢ Distribuci√≥n por canal
‚Ä¢ Embudo de conversi√≥n
‚Ä¢ An√°lisis de cohortes

**Insights principales:**
‚Ä¢ El canal org√°nico genera el 40% del tr√°fico
‚Ä¢ Los usuarios m√≥viles tienen 23% m√°s conversi√≥n
‚Ä¢ El abandono de carrito baj√≥ al 15%

¬øQuieres que exporte este reporte o necesitas an√°lisis adicionales?''';
    }
    
    if (lowercaseMessage.contains('patr√≥n') || lowercaseMessage.contains('detectar patrones')) {
      return '''üîç **Detecci√≥n de Patrones**

He analizado tus datos y encontr√© varios patrones interesantes:

**Patrones Temporales:**
‚Ä¢ Actividad m√°xima: Martes y mi√©rcoles 2-4 PM
‚Ä¢ Conversiones altas: Fines de semana por la ma√±ana
‚Ä¢ Abandono frecuente: Lunes en la tarde

**Patrones de Usuario:**
‚Ä¢ Usuarios recurrentes: 65% m√°s valor
‚Ä¢ Sesiones largas (>5 min): 3x m√°s conversi√≥n
‚Ä¢ Usuarios m√≥viles: Prefieren checkout r√°pido

**Anomal√≠as detectadas:**
‚Ä¢ Pico inusual el 15 de este mes (+340%)
‚Ä¢ Ca√≠da at√≠pica en conversiones mobile
‚Ä¢ Incremento en devoluciones (+25%)

¬øQuieres que investigue alguna de estas anomal√≠as m√°s a fondo?''';
    }
    
    if (lowercaseMessage.contains('predicci√≥n') || lowercaseMessage.contains('predicciones')) {
      return '''üîÆ **Predicciones con IA**

Bas√°ndome en el an√°lisis de datos hist√≥ricos, aqu√≠ est√°n mis predicciones:

**Pr√≥ximos 30 d√≠as:**
‚Ä¢ Revenue estimado: \$420K (¬±15%)
‚Ä¢ Nuevos usuarios: 1,850
‚Ä¢ Tasa de conversi√≥n: 3.2%

**Factores de influencia:**
‚Ä¢ Estacionalidad: +12% por temporada alta
‚Ä¢ Tendencia actual: +8% crecimiento mensual
‚Ä¢ Campa√±as activas: +5% conversi√≥n adicional

**Escenarios:**
üü¢ **Optimista**: \$485K (+15%)
üü° **Realista**: \$420K (base)
üî¥ **Conservador**: \$357K (-15%)

**Recomendaciones para maximizar resultados:**
‚Ä¢ Aumentar presupuesto de ads en 20%
‚Ä¢ Lanzar campa√±a de retenci√≥n
‚Ä¢ Optimizar landing pages m√≥viles

¬øTe interesa que detalle alg√∫n escenario espec√≠fico?''';
    }
    
    // Respuesta gen√©rica
    return '''¬°Hola! Soy tu asistente de an√°lisis de datos con IA. 

Puedo ayudarte con:
‚Ä¢ üìä An√°lisis de tendencias y patrones
‚Ä¢ üìà Generaci√≥n de reportes autom√°ticos  
‚Ä¢ üîç Detecci√≥n de anomal√≠as
‚Ä¢ üîÆ Predicciones basadas en datos
‚Ä¢ üì± Insights de comportamiento de usuarios
‚Ä¢ üí∞ An√°lisis de m√©tricas de negocio

¬øEn qu√© an√°lisis te gustar√≠a que trabaje? Solo describe lo que necesitas y comenzar√© a procesar tus datos.''';
  }

  /// Cancela la respuesta actual
  void cancelCurrentResponse() {
    print('‚èπÔ∏è AIChatController: Cancelando respuesta');
    _isLoading = false;
    _isTyping = false;
    _typingTimer?.cancel();
    notifyListeners();
  }

  /// Limpia todos los mensajes de la conversaci√≥n actual
  void clearMessages() {
    print('üßπ AIChatController: Limpiando mensajes');
    _messages.clear();
    notifyListeners();
  }

  /// Limpia el mensaje de error
  void clearError() {
    _clearError();
  }

  /// Descarga un reporte usando el ChatService
  Future<Uint8List?> downloadReport(String reportId) async {
    try {
      print('üì• AIChatController: Descargando reporte $reportId');
      _setLoading(true);
      _clearError();

      final reportData = await _chatService.downloadReport(reportId);

      print('‚úì AIChatController: Reporte descargado exitosamente');
      _setLoading(false);
      return reportData;
    } catch (e) {
      print('‚úó AIChatController: Error al descargar reporte: $e');
      _setError('Error al descargar el reporte: ${e.toString()}');
      _setLoading(false);
      return null;
    }
  }

  /// Obtiene todos los mensajes que son reportes
  List<ChatMessage> getReportMessages() {
    return _messages.where((msg) => msg.isReportMessage).toList();
  }

  /// Obtiene el √∫ltimo mensaje de tipo reporte
  ChatMessage? getLastReportMessage() {
    final reportMessages = getReportMessages();
    return reportMessages.isNotEmpty ? reportMessages.last : null;
  }

  // M√©todos privados auxiliares
  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String error) {
    _errorMessage = error;
    notifyListeners();
  }

  void _clearError() {
    _errorMessage = null;
  }

  @override
  void dispose() {
    print('üîö AIChatController: Disposing');
    _typingTimer?.cancel();
    _chatService.dispose();
    super.dispose();
  }
}

class ChatMessage {
  final String content;
  final bool isUser;
  final DateTime timestamp;
  final bool isNew;
  final String? metadata;
  final ResponseType? responseType;

  ChatMessage({
    required this.content,
    required this.isUser,
    required this.timestamp,
    this.isNew = true,
    this.metadata,
    this.responseType,
  });

  /// Verifica si el mensaje es de tipo reporte
  bool get isReportMessage => responseType == ResponseType.REPORT_DOWNLOAD;

  /// Verifica si el mensaje tiene metadata
  bool get hasMetadata => metadata != null && metadata!.isNotEmpty;

  /// Crea una copia del mensaje
  ChatMessage copyWith({
    String? content,
    bool? isUser,
    DateTime? timestamp,
    bool? isNew,
    String? metadata,
    ResponseType? responseType,
  }) {
    return ChatMessage(
      content: content ?? this.content,
      isUser: isUser ?? this.isUser,
      timestamp: timestamp ?? this.timestamp,
      isNew: isNew ?? this.isNew,
      metadata: metadata ?? this.metadata,
      responseType: responseType ?? this.responseType,
    );
  }
}